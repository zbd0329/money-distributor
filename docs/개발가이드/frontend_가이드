# **Frontend 개발 가이드라인 (Vue.js 3 + Vite)**

## **개발환경**
- **Node.js:** 22.x+
- **Vue.js:** 3.x [(공식 문서)](https://vuejs.org/)
- **Vite:** 최신 안정 버전 [(공식 문서)](https://vitejs.dev/)
- **패키지 매니저:** pnpm
- **스타일링:** Tailwind CSS
- **UI 라이브러리:** Vuetify 또는 PrimeVue
- **웹 서버:** Nginx

---

## **아키텍처 설계**
- **컴포넌트 기반 설계**
  - Atomic Design 패턴 적용
  - 재사용 가능한 컴포넌트 분리
- **상태 관리 전략**
  - 로컬 상태: Composition API (`ref`, `reactive`)
  - 전역 상태: Pinia 스토어
- **라우팅 관리**
  - Vue Router를 활용한 SPA 구현

### **프로젝트 디렉토리 구조**
    frontend/
    ├── src/
    │   ├── components/     # 재사용 가능한 UI 컴포넌트
    │   │   ├── atoms/     # 기본 UI 요소
    │   │   ├── molecules/ # 복합 UI 요소
    │   │   └── organisms/ # 섹션 단위 컴포넌트
    │   ├── pages/         # 페이지 컴포넌트
    │   │   ├── Home.vue
    │   │   ├── Login.vue
    │   │   └── Chat.vue
    │   ├── composables/   # 재사용 가능한 로직 (커스텀 훅)
    │   │   ├── useAuth.js
    │   │   └── useChat.js
    │   ├── store/         # Pinia 상태 관리
    │   │   ├── auth.js
    │   │   └── chat.js
    │   ├── services/      # API 통신 모듈
    │   │   ├── api.js
    │   │   └── axios.js
    │   ├── utils/         # 유틸리티 함수
    │   │   ├── validators.js
    │   │   └── formatters.js
    │   ├── assets/        # 정적 리소스
    │   │   ├── images/
    │   │   └── styles/
    │   ├── router/        # 라우팅 설정
    │   │   └── index.js
    │   ├── App.vue        # 루트 컴포넌트
    │   └── main.js        # 앱 진입점
    ├── public/            # 정적 파일
    ├── index.html
    ├── vite.config.js
    ├── package.json
    ├── pnpm-lock.yaml
    ├── .eslintrc.js
    └── tailwind.config.js

---

## **코딩 표준**

### **명명 규칙**
- **컴포넌트:** PascalCase (예: `UserProfile.vue`)
- **변수/함수:** camelCase
- **상수:** UPPER_SNAKE_CASE
- **CSS 클래스:** kebab-case

### **컴포넌트 작성 규칙**
```vue
<script setup>
// 1. 외부 imports
import { ref, onMounted } from 'vue'
import { useRouter } from 'vue-router'

// 2. props/emits 정의
const props = defineProps({
  title: String
})
const emit = defineEmits(['update'])

// 3. 컴포지션 함수
const router = useRouter()

// 4. 반응형 상태/참조
const count = ref(0)

// 5. 메서드
const increment = () => {
  count.value++
  emit('update', count.value)
}

// 6. 생명주기 훅
onMounted(() => {
  // 초기화 로직
})
</script>

<template>
  <div class="component-container">
    <h1>{{ title }}</h1>
    <button @click="increment">
      Count: {{ count }}
    </button>
  </div>
</template>

<style scoped>
.component-container {
  /* 스타일링 */
}
</style>
```

---

## **API 통신**

### **Axios 설정 및 인터셉터**
```javascript
import axios from 'axios'

const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL,
  timeout: 5000,
  headers: {
    'Content-Type': 'application/json'
  }
})

// 요청 인터셉터
api.interceptors.request.use(config => {
  const token = localStorage.getItem('token')
  if (token) {
    config.headers.Authorization = `Bearer ${token}`
  }
  return config
})

// 응답 인터셉터
api.interceptors.response.use(
  response => response,
  error => {
    if (error.response?.status === 401) {
      // 인증 에러 처리
    }
    return Promise.reject(error)
  }
)

export default api
```

---

## **상태 관리**

### **Pinia 스토어 예시**
```javascript
import { defineStore } from 'pinia'

export const useAuthStore = defineStore('auth', {
  state: () => ({
    user: null,
    token: null
  }),
  
  getters: {
    isAuthenticated: state => !!state.token
  },
  
  actions: {
    async login(credentials) {
      // 로그인 로직
    },
    logout() {
      // 로그아웃 로직
    }
  }
})
```

---

## **성능 최적화**
- **컴포넌트 지연 로딩**
  - `defineAsyncComponent` 활용
- **이미지 최적화**
  - WebP 포맷 사용
  - 적절한 이미지 크기 설정
- **번들 크기 최적화**
  - Tree Shaking
  - Code Splitting

---

## **테스트**
- **단위 테스트:** Vitest
- **컴포넌트 테스트:** Vue Test Utils
- **E2E 테스트:** Cypress

### **테스트 예시**
```javascript
import { mount } from '@vue/test-utils'
import { describe, it, expect } from 'vitest'
import UserProfile from '../components/UserProfile.vue'

describe('UserProfile', () => {
  it('renders user name correctly', () => {
    const wrapper = mount(UserProfile, {
      props: {
        username: 'John Doe'
      }
    })
    expect(wrapper.text()).toContain('John Doe')
  })
})
```

---

## **보안**
- **XSS 방어**
  - Vue의 기본 이스케이프 활용
  - 사용자 입력 검증
- **CSRF 토큰 관리**
- **민감한 정보 관리**
  - 환경 변수 사용
  - `.env` 파일 관리

---

## **배포**
- **빌드 최적화**
  - 프로덕션 빌드 설정
  - 환경별 설정 분리
- **CI/CD 파이프라인**
  - GitHub Actions 활용
- **Nginx 설정**
  - HTTPS 설정
  - 캐싱 전략

## **프록시 설정 및 백엔드 연동**
- **백엔드 연동 설정**
  - 백엔드는 기본적으로 외부 노출을 제한하도록 프록시 설정
  - Vite 프록시 설정 예시:
  ```javascript
  // vite.config.js
  export default defineConfig({
    server: {
      proxy: {
        '/api': {
          target: 'http://localhost:8000',
          changeOrigin: true
        }
      }
    }
  })
  ```

## **의존성 관리**
- **패키지 업데이트 관리**
  - `pnpm outdated` 명령어로 의존성 상태 정기적 확인
  - 공식 문서 기반 최신 업데이트 및 변경사항 확인
  - Deprecated 라이브러리 대체 검토
- **CLI 사용**
  - 터미널 명령어 사용시 절대경로 기반으로 작성

## **웹 접근성 및 UX 최적화**
### **접근성(A11y) 표준**
- **WCAG 가이드라인 준수**
  ```javascript
  // ESLint 설정에 접근성 규칙 추가
  module.exports = {
    extends: [
      'plugin:vue/vue3-recommended',
      'plugin:@typescript-eslint/recommended',
      'plugin:vuejs-accessibility/recommended'
    ]
  }
  ```
- **키보드 네비게이션 지원**
  ```vue
  <template>
    <button 
      @click="handleClick"
      @keydown.enter="handleClick"
      role="button"
      tabindex="0"
    >
      {{ buttonText }}
    </button>
  </template>
  ```

### **반응형 디자인**
- **Tailwind CSS 브레이크포인트 활용**
  ```html
  <div class="w-full md:w-1/2 lg:w-1/3">
    <!-- 반응형 컨텐츠 -->
  </div>
  ```
- **모바일 우선 접근법 적용**
  - 기본 스타일은 모바일용으로 작성
  - 미디어 쿼리로 큰 화면 대응

### **성능 최적화 전략**
- **로딩 상태 관리**
  ```vue
  <template>
    <div>
      <SkeletonLoader v-if="loading" />
      <DataComponent v-else :data="data" />
    </div>
  </template>
  ```
- **이미지 최적화**
  - WebP 포맷 사용
  - 적절한 이미지 크기 설정
  ```vue
  <template>
    <picture>
      <source type="image/webp" srcset="image.webp">
      <img src="image.jpg" alt="설명" loading="lazy">
    </picture>
  </template>
  ```

## **SOLID 원칙 적용**
### **단일 책임 원칙 (SRP) 예시**
```vue
<!-- UserProfile.vue -->
<script setup>
// 하나의 컴포넌트는 하나의 책임만 가짐
const props = defineProps({
  user: Object
})

// 사용자 프로필 표시 관련 로직만 포함
const displayName = computed(() => {
  return `${props.user.firstName} ${props.user.lastName}`
})
</script>
```

### **개방-폐쇄 원칙 (OCP) 예시**
```vue
<!-- BaseButton.vue -->
<script setup>
// 기본 버튼 컴포넌트는 확장에는 열려있고 수정에는 닫혀있음
const props = defineProps({
  variant: {
    type: String,
    default: 'primary'
  },
  size: {
    type: String,
    default: 'medium'
  }
})

const buttonClasses = computed(() => ({
  'btn-primary': props.variant === 'primary',
  'btn-secondary': props.variant === 'secondary',
  'btn-sm': props.size === 'small',
  'btn-lg': props.size === 'large'
}))
</script>
```

## **환경별 설정 관리**
```javascript
// .env.development
VITE_API_URL=http://localhost:8000
VITE_ENV=development

// .env.production
VITE_API_URL=https://api.production.com
VITE_ENV=production

// 환경변수 사용
const apiUrl = import.meta.env.VITE_API_URL
```

## **에러 처리 및 로깅**
```javascript
// errorHandler.js
export const errorHandler = (error) => {
  if (import.meta.env.DEV) {
    console.error('Error:', error)
  }
  
  // 프로덕션 환경에서는 에러 로깅 서비스 사용
  if (import.meta.env.PROD) {
    // 에러 로깅 서비스에 전송
    errorLoggingService.log(error)
  }
  
  // 사용자에게 적절한 에러 메시지 표시
  return {
    message: '오류가 발생했습니다. 잠시 후 다시 시도해주세요.'
  }
}
```

## **Mac 및 zsh 환경 설정 참고사항**

### **Node.js 설치 및 관리**
```bash
# Homebrew를 통한 Node.js 설치
brew install node

# nvm을 사용한 Node.js 버전 관리 (권장)
brew install nvm

# zsh 설정 파일에 nvm 설정 추가
echo 'export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"' >> ~/.zshrc

# 설정 적용
source ~/.zshrc

# Node.js 22.x 설치
nvm install 22
nvm use 22
```

### **pnpm 설치 및 설정**
```bash
# pnpm 전역 설치
curl -fsSL https://get.pnpm.io/install.sh | sh -

# zsh 설정 파일에 pnpm 경로 추가
echo 'export PNPM_HOME="$HOME/Library/pnpm"
export PATH="$PNPM_HOME:$PATH"' >> ~/.zshrc

# 설정 적용
source ~/.zshrc
```

### **프로젝트 생성 및 의존성 설치**
```bash
# Vue 프로젝트 생성
pnpm create vite my-project --template vue

# 프로젝트 디렉토리로 이동
cd my-project

# 의존성 설치
pnpm install

# 추가 패키지 설치
pnpm add axios vue-router@4 pinia
pnpm add -D @vitejs/plugin-vue typescript @types/node
```

### **환경 변수 설정**
```bash
# .env 파일 생성
touch .env.development .env.production

# Mac에서 환경 변수 파일 편집
echo 'VITE_API_URL=http://localhost:8000
VITE_ENV=development' > .env.development

echo 'VITE_API_URL=https://api.production.com
VITE_ENV=production' > .env.production
```

### **개발 서버 실행**
```bash
# 개발 서버 실행
pnpm dev

# 프로덕션 빌드
pnpm build

# 프로덕션 빌드 미리보기
pnpm preview
```

### **Git 설정**
```bash
# .gitignore 파일 생성 및 설정
cat << EOF > .gitignore
# Mac 시스템 파일
.DS_Store
.AppleDouble
.LSOverride

# 의존성 디렉토리
node_modules
dist

# 로컬 환경 파일
.env
.env.local
.env.*.local

# 로그 파일
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# 에디터 디렉토리 및 파일
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
EOF
```

### **VSCode 설정 (권장)**
```bash
# VSCode 설정 디렉토리 생성
mkdir -p .vscode

# VSCode 설정 파일 생성
cat << EOF > .vscode/settings.json
{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  },
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "volar.completion.preferredTagNameCase": "pascal",
  "files.associations": {
    "*.css": "tailwindcss"
  }
}
EOF
```

### **패키지 스크립트 설정**
```json
// package.json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs --fix --ignore-path .gitignore",
    "format": "prettier --write src/",
    "type-check": "vue-tsc --noEmit"
  }
}
```