# **Backend 개발 가이드라인 (FastAPI + MySQL 8.0)**

## ** 개발환경 **
- **Python:** 3.11+
- **FastAPI:** 최신 안정 버전 [(공식 문서)](https://fastapi.tiangolo.com/)
- **Uvicorn:** 비동기 ASGI 서버
- **SQLAlchemy:** ORM 및 데이터베이스 연결
- **Alembic:** 마이그레이션 관리
- **MySQL 8.0:** 데이터베이스
- **Docker:** 개발 환경 격리 (선택 사항)
- **Redis:** 캐시 및 메시지 큐 (선택 사항)
- **RabbitMQ / Celery:** 비동기 작업 처리 (선택 사항)

---

## ** 아키텍처 설계**
- **모듈 기반 설계 (Modular Architecture)**
  - 기능별 모듈을 분리 (`user`, `room`, `spray`, `receive`)
- **비동기 처리 기반 설계**
  - `async/await`을 활용하여 성능 최적화
- **API 버전 관리**
  - RESTful API 설계 시 `/api/v1/resource` 형태로 관리
- **서비스 계층 분리**
  - Controller (API) / Service (비즈니스 로직) / Repository (DB 접근)
- **도메인 기반 아키텍처 적용**
  - FastAPI 프로젝트는 **도메인 중심 아키텍처**를 적용하여 기능별(`user`, `room`, `spray`, `receive`)로 모듈을 나누고, 내부에서 `controller`, `service`, `repository`, `model`을 관리합니다.

### ** back디렉토리 구조 예시**
    src/
    ├── api/
    │   ├── user/           # user 도메인 (회원 관련 기능)
    │   │   ├── user.controller.py  # API 엔드포인트
    │   │   ├── user.service.py     # 비즈니스 로직
    │   │   ├── user.repository.py  # DB 접근 계층
    │   │   ├── user.model.py       # SQLAlchemy 모델
    │   │   ├── user.schema.py      # Pydantic 스키마 (데이터 검증)
    │   ├── room/           # room 도메인 (채팅방 관련 기능)
    │   │   ├── room.controller.py
    │   │   ├── room.service.py
    │   │   ├── room.repository.py
    │   │   ├── room.model.py
    │   │   ├── room.schema.py
    │   ├── spray/          # spray 도메인 (뿌리기 기능)
    │   │   ├── spray.controller.py
    │   │   ├── spray.service.py
    │   │   ├── spray.repository.py
    │   │   ├── spray.model.py
    │   │   ├── spray.schema.py
    │   ├── receive/        # receive 도메인 (받기 기능)
    │   │   ├── receive.controller.py
    │   │   ├── receive.service.py
    │   │   ├── receive.repository.py
    │   │   ├── receive.model.py
    │   │   ├── receive.schema.py
    ├── core/
    │   ├── config.py       # 환경 변수 및 설정
    │   ├── security.py     # 인증 및 보안 설정
    ├── db/
    │   ├── database.py     # DB 연결 및 세션 설정
    │   ├── migrations/     # Alembic 마이그레이션
    ├── tests/
    │   ├── test_user.py
    │   ├── test_room.py
    │   ├── test_spray.py
    │   ├── test_receive.py
    ├── utils/
    │   ├── logger.py       # 로깅 설정
    │   ├── helpers.py      # 공통 유틸리티 함수
    ├── main.py             # FastAPI 애플리케이션 시작점
    ├── requirements.txt    # 프로젝트 의존성 파일
    ├── .env.example        #
    ├── .env
    ├── .gitignore
    └── Dockerfile          # Docker 설정 파일

- **확장성을 고려한 모듈화 설계**
    - 마이크로서비스 도입 검토 **(Optional)**
    - API Gateway를 통한 서비스 관리 **(Optional)**
- API 설계
    - 자원 중심 URL 설계
    - **RESTful API 설계 원칙**
        - `GET /users` → 조회
        - `POST /users` → 생성
        - `PUT /users/:id` → 수정
        - `DELETE /users/:id` → 삭제
    - Swagger 또는 Postman을 통한 API 문서화
        - **시스템 아키텍처 다이어그램 작성**
            - UML, C4 모델을 활용한 시각적 문서화
        - **코드 설명 주석 유지**
            - JSDoc을 사용하여 함수 설명 제공
        - 모든 api에 swagger를 사용합니다.
        - swagger에 summary, description을 사용합니다.
        - swagger 예시

            ```python
                from fastapi import FastAPI

                app = FastAPI()

                @app.get("/users", summary="사용자 목록 조회", description="전체 사용자 목록을 가져옵니다.")
                async def get_users():
                    return {"message": "사용자 목록"}
            ``` 
    - 요청 검증 및 에러 처리
        - 요청 검증은 pydantic을 사용합니다.
        - 에러 처리는 fastapi의 기본 에러 처리를 사용합니다.
        - 에러 처리 예시
            ```python
                from fastapi import FastAPI, HTTPException
                from pydantic import BaseModel, Field

                app = FastAPI()

                # Pydantic을 사용한 요청 스키마 정의
                class UserRequest(BaseModel):
                    user_id: int = Field(..., gt=0, description="사용자 ID는 0보다 커야 합니다.")

                @app.get("/users/{user_id}")
                async def get_user(user_id: int):
                    if user_id <= 0:
                        raise HTTPException(status_code=400, detail="잘못된 사용자 ID입니다.")
                    return {"user_id": user_id}
            ```

- 데이터 일관성
    - **트랜잭션 관리**
        - `SQLAlchemy`의 **비동기 세션 (`AsyncSession`)**을 사용하여 트랜잭션을 관리.
        - `commit()`, `rollback()`을 활용하여 데이터 정합성을 유지.
        - SAGA 패턴으로 분산 트랜잭션 관리
    - **데이터 정합성 유지**
        - 데이터베이스 유니크 제약 조건 적용
        - CASCADE 삭제 시 주의
        - 데이터베이스 인덱싱 최적화

## **클린 코드 작성**

### **일관된 코드 스타일 유지**
- **Black & Flake8 적용**
  - `black`을 사용하여 코드 포매팅 적용 [(공식 문서)](https://black.readthedocs.io/en/stable/)
  - `flake8`을 사용하여 코드 린팅 적용 [(공식 문서)](https://flake8.pycqa.org/en/latest/)
  - 함수는 **하나의 역할만 수행** (SRP 원칙 적용)
  - 파일 크기 최대 **300줄 이하 유지**
  
---

### **네이밍 컨벤션**
- **변수:** `snake_case`
- **함수:** 동사 + 명사 (예: `get_user_data`)
- **클래스:** `PascalCase`
- **파일명 규칙:** `user.py`, `room.py`, `spray.py` 등 **기능 단위 구분**

---

## **SOLID 원칙 적용**
- **SRP (단일 책임 원칙):** 하나의 모듈은 하나의 역할만 수행해야 한다.
- **OCP (개방-폐쇄 원칙):** 기존 코드를 변경하지 않고 확장 가능해야 한다.
- **LSP (리스코프 치환 원칙):** 하위 클래스는 상위 클래스를 대체할 수 있어야 한다.
- **ISP (인터페이스 분리 원칙):** 클라이언트는 필요하지 않은 인터페이스에 의존하면 안 된다.
- **DIP (의존성 역전 원칙):** 고수준 모듈이 저수준 모듈에 의존하지 않고 추상화에 의존해야 한다.

---

## **비즈니스 로직**
- **서비스 계층에서 비즈니스 로직 처리**
  - **컨트롤러 (API 엔드포인트)에서는 요청/응답만 담당**
  - **컨트롤러에서 로직 수행 금지**
  - 비즈니스 규칙은 **서비스 계층에서 처리**
- **유틸리티 함수 재사용성 강화**
  - `src/utils/` 디렉토리에서 공통 기능 제공

---

## **보안성**
### **환경 변수 관리**
- `.env` 파일을 통해 **환경 변수 관리**
- **Pydantic**을 활용하여 환경 변수 검증
- `.env.example` 파일을 제공하여 설정 가이드 제공


## **보안 모듈 적용**

### **1. HTTP 보안 설정**
- **Helmet (HTTP 보안 헤더)** → FastAPI에는 기본 적용되어 필요 없음.
- **CORS 설정 (`CORSMiddleware` 사용)**
- **Rate Limiting (요청 제한을 위한 `slowapi` 활용)**

```python
from slowapi import Limiter
from slowapi.util import get_remote_address
from fastapi import FastAPI

limiter = Limiter(key_func=get_remote_address)

app = FastAPI()
app.state.limiter = limiter
```

### **2. 입력값 검증**
- **Pydantic**을 활용하여 입력값 검증
- **SQL 인젝션 방어**
  - **SQLAlchemy ORM**을 사용하여 직접적인 쿼리 실행을 방지.

```python

### **3. 인증 및 권한 관리**
- **JWT (JSON Web Token) 기반 인증 (pyjwt 활용)**
- **RBAC (Role-Based Access Control) 적용**

### **4. 로깅 및 감사**
- **loguru**를 활용하여 중앙 집중 로깅 시스템 구축
- **로그 레벨 적용 (DEBUG, INFO, WARNING, ERROR)**

```python
from loguru import logger

logger.add("logs/app.log", rotation="10MB", level="INFO")
logger.info("서버 시작됨")
```

### **5. 테스트 프레임워크 사용**
- **단위 테스트: pytest**
- **FastAPI의 TestClient**를 활용한 API 테스트
- **부하 테스트: locust**

```python
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_get_users():
    response = client.get("/users")
    assert response.status_code == 200
```

### **6. TDD (Test-Driven Development) 적용**
- **기능 구현 전 테스트 케이스 작성**
- **Mocking을 통해 외부 의존성 최소화**

```python
from unittest.mock import MagicMock

mock_db = MagicMock()
mock_db.get_user.return_value = {"id": 1, "name": "Alice"}

def test_get_user():
    user = mock_db.get_user(1)
    assert user["name"] == "Alice"
```
