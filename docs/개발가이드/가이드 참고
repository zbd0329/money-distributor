## Frontend 개발 가이드라인 (Frontend Development Guidelines)

- 개발환경
    - **Node.js:** 22.x 버전
    - **Next.js:** 15.x 버전  https://nextjs.org/docs
    - **Nginx**
    - **패키지 매니저:** pnpm
    - **스타일링:** Tailwind CSS
    - **UI 라이브러리:** shadcn/ui
        
        ```markdown
        # Create project
        
        Run the `init` command to create a new Next.js project or to set up an existing one:
        
        ```bash
        pnpm dlx shadcn@latest init
        ```
        
        You can use the `-d` flag for defaults, i.e. `new-york`, `zinc`, and `yes` for the CSS variables.
        
        ```bash
        pnpm dlx shadcn@latest init -d
        ```
        
        ---
        
        ## Configure `components.json`
        
        You will be asked a few questions to configure `components.json`:
        
        ```plaintext
        Which style would you like to use? › New York
        Which color would you like to use as base color? › Zinc
        Do you want to use CSS variables for colors? › no / yes
        ```
        
        ---
        
        ## That's it
        
        You can now start adding components to your project.
        
        ```bash
        pnpm dlx shadcn@latest add button
        ```
        
        The command above will add the `Button` component to your project. You can then import it like this:
        
        ```jsx
        import { Button } from "@/components/ui/button"
        
        export default function Home() {
          return (
            <div>
              <Button>Click me</Button>
            </div>
          )
        }
        ```
        
        ```
        
    - **ESLint:** v9 이상 버전을 사용하고 공식 문서를 참고하세요.  https://eslint.org/docs/latest/
        
        ```markdown
        # Getting Started with ESLint
        
        ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs.
        
        ESLint is completely pluggable. Every single rule is a plugin and you can add more at runtime. You can also add community plugins, configurations, and parsers to extend the functionality of ESLint.
        
        ## Prerequisites
        
        To use ESLint, you must have Node.js (^18.18.0, ^20.9.0, or >=21.1.0) installed and built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)
        
        ## Quick start
        
        You can install and configure ESLint using this command:
        
        ```bash
        pnpm create @eslint/config@latest
        ```
        
        If you want to use a specific shareable config that is hosted on npm, you can use the `--config` option and specify the package name:
        
        ```bash
        # use `eslint-config-standard` shared config - npm 7+
        pnpm create @eslint/config@latest -- --config eslint-config-standard
        ```
        
        **Note:** `npm init @eslint/config` assumes you have a `package.json` file already. If you don’t, make sure to run `npm init` or `yarn init` beforehand.
        
        After that, you can run ESLint on any file or directory like this:
        
        ```bash
        pnpm dlx eslint yourfile.js
        ```
        
        ---
        
        ## Configuration
        
        **Note:** If you are coming from a version before 9.0.0 please see the migration guide.
        
        When you run `npm init @eslint/config`, you’ll be asked a series of questions to determine how you’re using ESLint and what options should be included. After answering these questions, you’ll have an `eslint.config.js` (or `eslint.config.mjs`) file created in your directory.
        
        For example, one of the questions is:
        
        ```plaintext
        Where does your code run? › Browser
        ```
        
        If you select “Browser” then your configuration file will contain the definitions for global variables found in web browsers. Here’s an example:
        
        ```js
        import globals from "globals";
        import pluginJs from "@eslint/js";
        
        /** @type {import('eslint').Linter.Config[]} */
        export default [
          { languageOptions: { globals: globals.browser } },
          pluginJs.configs.recommended,
        ];
        ```
        
        The `pluginJs.configs.recommended` object contains configuration to ensure that all of the rules marked as recommended on the rules page will be turned on. Alternatively, you can use configurations that others have created by searching for “eslint-config” on npmjs.com. ESLint will not lint your code unless you extend from a shared configuration or explicitly turn rules on in your configuration.
        
        You can configure rules individually by defining a new object with a `rules` key, as in this example:
        
        ```js
        import pluginJs from "@eslint/js";
        
        export default [
            pluginJs.configs.recommended,
        
            {
                rules: {
                    "no-unused-vars": "warn",
                    "no-undef": "warn"
                }
            }
        ];
        ```
        
        The names `"no-unused-vars"` and `"no-undef"` are the names of rules in ESLint. The first value is the error level of the rule and can be one of these values:
        
        - `"off"` or `0` - turn the rule off
        - `"warn"` or `1` - turn the rule on as a warning (doesn’t affect exit code)
        - `"error"` or `2` - turn the rule on as an error (exit code will be 1)
        
        The three error levels allow you fine-grained control over how ESLint applies rules (for more configuration options and details, see the configuration docs).
        
        ---
        
        ## Manual Set Up
        
        You can also manually set up ESLint in your project.
        
        Before you begin, you must already have a `package.json` file. If you don’t, make sure to run `npm init` or `yarn init` to create the file beforehand.
        
        ### Install the ESLint packages in your project:
        
        ```bash
        pnpm add --save-dev eslint @eslint/js
        ```
        
        ### Add an `eslint.config.js` file:
        
        ```bash
        # Create JavaScript configuration file
        touch eslint.config.js
        ```
        
        Add configuration to the `eslint.config.js` file. Refer to the Configure ESLint documentation to learn how to add rules, custom configurations, plugins, and more.
        
        ```js
        import pluginJs from "@eslint/js";
        
        export default [
            pluginJs.configs.recommended,
        
           {
               rules: {
                   "no-unused-vars": "warn",
                   "no-undef": "warn"
               }
           }
        ];
        ```
        
        ### Lint code using the ESLint CLI:
        
        ```bash
        pnpm dlx eslint project-dir/ file.js
        ```
        
        For more information on the available CLI options, refer to [Command Line Interface](https://eslint.org/docs/latest/use/command-line-interface).
        
        ```
        
- 백엔드는 기본적으로 사용자의 별도의 요구가 없는한 외부로 노출되지 않도록 프록시 설정을 기반으로 한다.
- **파일 접근 방식:**
    - 터미널에서 명령 작성시 반드시 **절대경로 기반으로** CLI 사용
- **deprecated 서비스 회피 및 최신 업데이트**
    - `pnpm outdated` 명령어를 활용해 의존성 상태 확인.
    - 사용 중인 라이브러리의 최신 릴리스 및 변경사항은 공식 문서를 수시로 확인.
    - 문제가 발생할 경우 다른 라이브러리(예: `eslint-config-airbnb` 대신 `eslint-config-next` 사용)로 대체.
- 기본적으로 서버 사이드 렌더링 (Server-Side Rendering, SSR) 방식을 사용합니다.
    - 단, 증분 정적 생성 (Incremental Static Regeneration, ISR)도 적극적으로 사용합니다.
- **접근성(A11y) 및 UX 최적화**
    - **웹 접근성 준수 (WCAG 가이드라인 참고)**
        - `eslint-plugin-jsx-a11y`를 통해 접근성 검사를 자동화.
        - 키보드 네비게이션 가능 여부 확인.
        - ARIA 속성 활용.
    - **반응형 디자인 적용**
        - Tailwind CSS의 `sm`, `md`, `lg`, `xl` 유틸리티 사용.
        - 모바일 우선 접근법(Mobile First Design) 적용.
    - **SEO 최적화**
        - 메타 태그 관리(`next/head` 사용).
        - 검색 엔진 친화적인 URL 구조 유지.
    - **로딩 성능 최적화**
        - 로딩 애니메이션 및 Skeleton UI 적용.
        - 불필요한 네트워크 요청 최소화.
- 성능 최적화
    - **Lazy Loading (지연 로딩) 적용**
        - 페이지 및 컴포넌트별 동적 로딩 (`next/dynamic` 사용).
        - 이미지 최적화(`next/image` 사용).
    - **불필요한 리렌더링 방지**
        - React의 `useMemo`, `useCallback`, `React.memo`를 적절히 사용.
    - **코드 스플리팅 적용**
        - 웹팩 코드 스플리팅을 통해 필요한 리소스만 로드.
    - **불필요한 상태 최소화**
        - 불필요한 글로벌 상태 사용을 줄이고, 로컬 상태 우선 활용.
- 유지보수 및 확장성
    - **SOLID 원칙 준수** (특히 TypeScript 사용 시 중요)
        - 단일 책임 원칙 (SRP)
        - 개방-폐쇄 원칙 (OCP)
        - 리스코프 치환 원칙 (LSP)
        - 인터페이스 분리 원칙 (ISP)
        - 의존 역전 원칙 (DIP)
    - **컴포넌트는 작고 독립적으로 유지**
        - Atomic Design 패턴 (Atoms, Molecules, Organisms) 적용.
        - 재사용성을 높이고, 테스트가 쉬운 구조 유지.
    - **폴더 및 파일 구조 일관성 유지**
        - 기능별/도메인별 폴더 분리 (`components`, `pages`, `hooks`, `utils`, `services`).
        - 예시:
            
            ```bash
            bash
            복사편집
            /components  # 재사용 가능한 UI
            /pages       # Next.js 페이지
            /hooks       # 커스텀 훅
            /utils       # 공통 유틸 함수
            /services    # API 호출 로직
            
            ```
            
    - **적절한 상태 관리 적용**
        - 로컬 상태(`useState`/`useReducer`) vs 글로벌 상태(Zustand, Redux, Recoil).
        - 단순한 상태는 Context API 사용.